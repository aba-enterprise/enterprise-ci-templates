name: SonarQube Analysis (Reusable Multi-Language)

on:
  workflow_call:
    inputs:
      projectKey:
        required: true
        type: string
      organizationKey:
        required: true
        type: string
      language:
        description: "Programming language (dotnet/java/node/python)"
        required: true
        type: string
      language-version:
        description: "Language/runtime version"
        required: true
        type: string
      projectSlnPath:
        required: false
        type: string
      testProjectPath:
        required: false
        type: string
      run-sonarqube-gate-check:
        description: "Run SonarQube Quality Gate check? (yes/no)"
        type: string
        required: false
        default: "yes"
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Setup runtime based on language
      - name: Setup Runtime (.NET)
        if: ${{ inputs.language == 'dotnet' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.language-version }}

      - name: Setup Runtime (Java)
        if: ${{ inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.language-version }}
          distribution: 'temurin'

      - name: Setup Runtime (Node)
        if: ${{ inputs.language == 'node' }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.language-version }}

      - name: Setup Runtime (Python)
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.language-version }}

      # Install SonarScanner & tools
      - name: Install SonarScanner & Tools
        run: |
          if [[ "${{ inputs.language }}" == "dotnet" ]]; then
            dotnet tool install --global dotnet-sonarscanner
            dotnet tool install --global dotnet-reportgenerator-globaltool
            echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          elif [[ "${{ inputs.language }}" == "java" ]]; then
            echo "Using Maven/Gradle Sonar Plugin (already bundled)"
          elif [[ "${{ inputs.language }}" == "node" ]]; then
            npm install -g sonar-scanner
          elif [[ "${{ inputs.language }}" == "python" ]]; then
            pip install sonar-scanner
          fi

      # Build & Run Tests (language-specific)
      - name: Build & Test with Coverage
        run: |
          if [[ "${{ inputs.language }}" == "dotnet" && inputs.projectSlnPath && inputs.testProjectPath ]]; then
            mkdir -p ./coverage
            dotnet build ./${{ inputs.projectSlnPath }} --configuration Release
            dotnet test ./${{ inputs.testProjectPath }} --collect:"XPlat Code Coverage" --results-directory ./coverage -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          # clean verify  compiles, tests, packages, and runs all Maven lifecycle steps. 
          # jacoco:report generates the coverage XML/HTML report
          elif [[ "${{ inputs.language }}" == "java" ]]; then
            if [ -f "pom.xml" ]; then
              mvn clean verify jacoco:report
            elif [ -f "build.gradle" ]; then
              ./gradlew clean test jacocoTestReport
            fi

          elif [[ "${{ inputs.language }}" == "node" ]]; then
            npm install
            npx jest --coverage

          elif [[ "${{ inputs.language }}" == "python" ]]; then
            pip install -r requirements.txt
            pytest --cov=./ --cov-report=xml
          fi

      # Run SonarScanner
      - name: Run SonarQube Scanner
        run: |
          SONAR_PARAMS="-Dsonar.projectKey=${{ inputs.projectKey }} -Dsonar.organization=${{ inputs.organizationKey }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}"

          if [[ "${{ inputs.language }}" == "dotnet" ]]; then
            COVERAGE_PATH="./coverage/**/coverage.opencover.xml"
            dotnet sonarscanner begin /k:"${{ inputs.projectKey }}" /o:"${{ inputs.organizationKey }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="$COVERAGE_PATH"
            dotnet build
            dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

          elif [[ "${{ inputs.language }}" == "java" ]]; then
            mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey="${{ inputs.projectKey }}" \
              -Dsonar.organization="${{ inputs.organizationKey }}" \
              -Dsonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
              -Dsonar.token="${{ secrets.SONAR_TOKEN }}" \
              -Dsonar.coverage.jacoco.xmlReportPaths="target/site/jacoco/jacoco.xml" \
              -Dsonar.java.binaries="target/classes"

          elif [[ "${{ inputs.language }}" == "node" ]]; then
            COVERAGE_PATH="./coverage/lcov.info"
            sonar-scanner $SONAR_PARAMS -Dsonar.javascript.lcov.reportPaths="$COVERAGE_PATH"

          elif [[ "${{ inputs.language }}" == "python" ]]; then
            COVERAGE_PATH="./coverage.xml"
            sonar-scanner $SONAR_PARAMS -Dsonar.python.coverage.reportPaths="$COVERAGE_PATH"
          fi

      # Optional: Coverage Summary (multi-language)
      - name: Generate Coverage Summary
        run: |
          if [[ "${{ inputs.language }}" == "dotnet" ]]; then
            COVERAGE_FILE=$(find ./coverage -type f -name "coverage.opencover.xml" | head -n 1)
            if [ -f "$COVERAGE_FILE" ]; then
              reportgenerator -reports:$COVERAGE_FILE -targetdir:coverage-summary -reporttypes:TextSummary
              echo "## 🔎 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
              cat coverage-summary/Summary.txt >> $GITHUB_STEP_SUMMARY
            fi

          elif [[ "${{ inputs.language }}" == "java" && -f "target/site/jacoco/jacoco.xml" ]]; then
            echo "## 🔎 Code Coverage Summary (Java)" >> $GITHUB_STEP_SUMMARY
          
          INSTRUCTION=$(grep "<counter type=\"INSTRUCTION\"" target/site/jacoco/jacoco.xml | head -n1 | sed -E 's/.*missed="([0-9]+)".*covered="([0-9]+)".*/\1 \2/')
          MISSED=$(echo $INSTRUCTION | awk '{print $1}')
          COVERED=$(echo $INSTRUCTION | awk '{print $2}')
          TOTAL=$((MISSED + COVERED))
          PERCENT=$((100 * COVERED / TOTAL))

          echo "| Metric       | Covered | Missed | Total | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|---------|--------|-------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Instructions | $COVERED | $MISSED | $TOTAL | $PERCENT% |" >> $GITHUB_STEP_SUMMARY

          # Do the same for LINE coverage
          LINE=$(grep "<counter type=\"LINE\"" target/site/jacoco/jacoco.xml | head -n1 | sed -E 's/.*missed="([0-9]+)".*covered="([0-9]+)".*/\1 \2/')
          MISSED=$(echo $LINE | awk '{print $1}')
          COVERED=$(echo $LINE | awk '{print $2}')
          TOTAL=$((MISSED + COVERED))
          PERCENT=$((100 * COVERED / TOTAL))

          echo "| Lines        | $COVERED | $MISSED | $TOTAL | $PERCENT% |" >> $GITHUB_STEP_SUMMARY

          elif [[ "${{ inputs.language }}" == "node" && -f "coverage/lcov.info" ]]; then
            echo "## 🔎 Code Coverage Summary (Node)" >> $GITHUB_STEP_SUMMARY
            npx istanbul report text-summary | tee -a $GITHUB_STEP_SUMMARY

          elif [[ "${{ inputs.language }}" == "python" && -f "coverage.xml" ]]; then
            echo "## 🔎 Code Coverage Summary (Python)" >> $GITHUB_STEP_SUMMARY
            coverage report | tee -a $GITHUB_STEP_SUMMARY
          fi

      # Check SonarQube Quality Gate (all languages)
      - name: Check SonarQube Quality Gate
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ inputs.projectKey }}" | jq -r '.projectStatus.status')
          echo "Quality Gate status: $STATUS"
          if [[ "${{ inputs.run-sonarqube-gate-check }}" == "yes" ]]; then
              if [ "$STATUS" = "OK" ]; then
                echo "✅ Quality Gate passed: $STATUS" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ Quality Gate failed: $STATUS" >> $GITHUB_STEP_SUMMARY
                # exit 1
              fi
          else
            echo "⚠️ Gate check bypassed (run-sonarqube-gate-check=no), status: $STATUS" >> $GITHUB_STEP_SUMMARY
          fi
