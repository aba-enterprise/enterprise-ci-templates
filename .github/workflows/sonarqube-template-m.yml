name: SonarQube Analysis (Reusable Multi-Language)

on:
  workflow_call:
    inputs:
      projectKey:
        required: true
        type: string
      organizationKey:
        required: true
        type: string
      language:
        description: "Programming language (dotnet/java/node/python)"
        required: true
        type: string
      language-version:
        description: "Language/runtime version"
        required: true
        type: string
      projectSlnPath:
        required: false
        type: string
      testProjectPath:
        required: false
        type: string
      run-sonarqube-gate-check:
        description: "Run SonarQube Quality Gate check? (yes/no)"
        type: string
        required: false
        default: "yes"
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Setup runtime based on language
      - name: Setup Runtime
        if: ${{ inputs.language == 'dotnet' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.language-version }}

      - name: Setup Runtime
        if: ${{ inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.language-version }}
          distribution: 'temurin'

      - name: Setup Runtime
        if: ${{ inputs.language == 'node' }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.language-version }}

      - name: Setup Runtime
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.language-version }}

      # Install SonarScanner & tools
      - name: Install SonarScanner & Tools
        run: |
          if [[ "${{ inputs.language }}" == "dotnet" ]]; then
            dotnet tool install --global dotnet-sonarscanner
            dotnet tool install --global dotnet-reportgenerator-globaltool
            echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          elif [[ "${{ inputs.language }}" == "java" ]]; then
            curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.9.3.6977-linux.zip
            unzip -qq sonar-scanner-cli.zip -d $HOME/sonar-scanner
            echo "$HOME/sonar-scanner/sonar-scanner-4.9.3.6977-linux/bin" >> $GITHUB_PATH
          else
            npm install -g sonar-scanner || pip install sonar-scanner
          fi

      # Begin SonarScanner
      - name: Begin SonarScanner
        run: |
          SONAR_PARAMS="-Dsonar.projectKey=${{ inputs.projectKey }} -Dsonar.organization=${{ inputs.organizationKey }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}"
          
          # Auto-detect coverage files
          if [[ "${{ inputs.language }}" == "dotnet" ]]; then
            COVERAGE_PATH="./coverage/**/coverage.opencover.xml"
            dotnet sonarscanner begin /k:"${{ inputs.projectKey }}" /o:"${{ inputs.organizationKey }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="$COVERAGE_PATH"
          elif [[ "${{ inputs.language }}" == "java" ]]; then
            if [ -f "pom.xml" ]; then
              COVERAGE_PATH="./target/site/jacoco/jacoco.xml"
            elif [ -f "build.gradle" ]; then
              COVERAGE_PATH="./build/reports/jacoco/test/jacocoTestReport.xml"
            fi
            sonar-scanner $SONAR_PARAMS -Dsonar.java.coveragePlugin=jacoco -Dsonar.coverage.jacoco.xmlReportPaths="$COVERAGE_PATH"
          elif [[ "${{ inputs.language }}" == "node" ]]; then
            COVERAGE_PATH="./coverage/lcov.info"
            sonar-scanner $SONAR_PARAMS -Dsonar.javascript.lcov.reportPaths="$COVERAGE_PATH"
          elif [[ "${{ inputs.language }}" == "python" ]]; then
            COVERAGE_PATH="./coverage.xml"
            sonar-scanner $SONAR_PARAMS -Dsonar.python.coverage.reportPaths="$COVERAGE_PATH"
          fi

      # Build & Run Tests
      - name: Build & Test with Coverage
        run: |
          if [[ "${{ inputs.language }}" == "dotnet" && inputs.projectSlnPath && inputs.testProjectPath ]]; then
            mkdir -p ./coverage
            dotnet build ./${{ inputs.projectSlnPath }} --configuration Release
            dotnet test ./${{ inputs.testProjectPath }} --collect:"XPlat Code Coverage" --results-directory ./coverage -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          elif [[ "${{ inputs.language }}" == "java" ]]; then
            if [ -f "pom.xml" ]; then
              mvn clean test jacoco:report
            elif [ -f "build.gradle" ]; then
              ./gradlew test jacocoTestReport
            fi
          elif [[ "${{ inputs.language }}" == "node" ]]; then
            npm install
            npx jest --coverage
          elif [[ "${{ inputs.language }}" == "python" ]]; then
            pip install -r requirements.txt
            pytest --cov=./ --cov-report=xml

      # End SonarScanner (dotnet only)
      - name: End SonarScanner
        run: |
          if [[ "${{ inputs.language }}" == "dotnet" ]]; then
            dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          fi

      # Optional: Coverage Summary (dotnet only)
      - name: Generate Coverage Summary
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          COVERAGE_FILE=$(find ./coverage -type f -name "coverage.opencover.xml" | head -n 1)
          if [ -f "$COVERAGE_FILE" ]; then
            reportgenerator -reports:$COVERAGE_FILE -targetdir:coverage-summary -reporttypes:TextSummary
            echo "## 🔎 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
            cat coverage-summary/Summary.txt >> $GITHUB_STEP_SUMMARY
          fi

      # Check SonarQube Quality Gate
      - name: Check SonarQube Quality Gate
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ inputs.projectKey }}" | jq -r '.projectStatus.status')
          echo "Quality Gate status: $STATUS"
          if [[ "${{ inputs.run-sonarqube-gate-check }}" == "yes" ]]; then
              if [ "$STATUS" = "OK" ]; then
                echo "✅ Quality Gate passed: $STATUS" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ Quality Gate failed: $STATUS" >> $GITHUB_STEP_SUMMARY
                # exit 1
              fi
          else
            echo "⚠️ Gate check bypassed (run-sonarqube-gate-check=no), status: $STATUS" >> $GITHUB_STEP_SUMMARY
          fi
