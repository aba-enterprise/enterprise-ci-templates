name: SonarQube Analysis (.NET Core)

on:
  workflow_call:
    inputs:
      projectKey:
        required: true
        type: string
      projectName:
        required: true
        type: string
      run-sonarqube-gate-check:
        description: "Run Veracode alert check? (yes/no)"
        type: string
        required: false
        default: "yes"
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
    
jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
            name: dotnet-build
            path: ./build

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      # - name: Begin SonarQube analysis
      #   run: |
      #     echo "üîé Checking SonarQube alerts for branch ${GITHUB_REF}..."

      #     # CRITICAL=0
      #     # HIGH=0
      #     # MEDIUM=0
      #     # LOW=0

      #     # echo "üîé CodeQL Findings Summary:"
      #     # echo "  Critical: $CRITICAL"
      #     # echo "  High:     $HIGH"
      #     # echo "  Medium:   $MEDIUM"
      #     # echo "  Low:      $LOW"

      #     # {
      #     #   echo "## üîé SonarQube Findings Summary"
      #     #   echo "- Critical: **$CRITICAL**"
      #     #   echo "- High: **$HIGH**"
      #     #   echo "- Medium: $MEDIUM"
      #     #   echo "- Low: $LOW"
      #     # } >> $GITHUB_STEP_SUMMARY
          
      #     # INPUT_RUN_ALERT_CHECK=${{ inputs.run-sonarqube-gate-check }}
      #     # if [[ "$INPUT_RUN_ALERT_CHECK" == "yes" ]] && { [[ "$CRITICAL" -gt 0 ]] || [[ "$HIGH" -gt 0 ]]; }; then
      #     #   echo "‚ùå Pipeline failed due to critical/high findings."
      #     #   exit 1
      #     # else
      #     #   echo "‚úÖ No critical/high findings. Continuing pipeline."
      #     # fi
          
      - name: Begin SonarQube analysis
        run: |
          dotnet sonarscanner begin \
            /k:"${{ inputs.projectKey }}" \
            /n:"${{ inputs.projectName }}" \
            /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

      # - name: Rebuild from artifact (optional)
      #   run: dotnet build ./build/YourSolution.sln

      - name: End SonarQube analysis
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

