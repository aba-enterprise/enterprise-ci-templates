name: SonarQube Analysis (.NET Core)

on:
  workflow_call:
    inputs:
      projectKey:
        required: true
        type: string
      # projectName:
      #   required: true
      #   type: string
      # projectPath:
      #   required: true
      #   type: string
      # testProjectPath:
      #   required: true
      #   type: string
      organizationKey:
        required: true
        type: string
      run-sonarqube-gate-check:
        description: "Run Veracode alert check? (yes/no)"
        type: string
        required: false
        default: "yes"
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
    
jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
            name: dotnet-sourcecode
            path: ./source

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Add tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Run tests with coverage
        run: |
          dotnet test ./source/ \
            --collect:"XPlat Code Coverage" \
            --results-directory ./source/TestResults
      
      - name: Find coverage file
        id: coverage
        run: |
          COVERAGE_FILE=$(find ./source -type f -path "*/TestResults/*/coverage.cobertura.xml" | head -n 1)
          echo "Coverage file found: $COVERAGE_FILE"
          echo "COVERAGE_FILE=$COVERAGE_FILE" >> $GITHUB_ENV

      - name: Generate Coverage Summary
        run: |
          if [ -f "$COVERAGE_FILE" ]; then
            reportgenerator -reports:$COVERAGE_FILE -targetdir:coverage -reporttypes:TextSummary
            echo "### Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
            cat coverage/Summary.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "### Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "No coverage report found." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Begin SonarScanner
        run: |
          dotnet sonarscanner begin \
            /k:"org-testfordemo_myapp-netcore" \
            /o:"org-testfordemo" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="$COVERAGE_FILE"

      - name: Build solution
        run: dotnet build ./source/*.sln --configuration Release

      # - name: Run tests with coverage
      #   run: |
      #       dotnet test ./dotnet-ecs-sample.Tests/dotnet-ecs-sample.Tests.csproj \
      #       --collect:"XPlat Code Coverage" \
      #       -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: End SonarScanner
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
      - name: Check SonarQube Quality Gate
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ inputs.projectKey }}" \
            | jq -r '.projectStatus.status')

          echo "Quality Gate status: $STATUS"
          INPUT_RUN_ALERT_CHECK=${{ inputs.run-sonarqube-gate-check }}
          if [[ "$INPUT_RUN_ALERT_CHECK" == "yes" ]]; then
              if [ "$STATUS" = "OK" ]; then
                echo "✅ Quality Gate passed: $STATUS" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ Quality Gate failed: $STATUS" >> $GITHUB_STEP_SUMMARY
                # exit 1  # Uncomment to fail the pipeline on gate failure
              fi
          else
            echo "⚠️ Gate check bypassed as per configuration (run-sonarqube-gate-check=no)." >> $GITHUB_STEP_SUMMARY
          fi
