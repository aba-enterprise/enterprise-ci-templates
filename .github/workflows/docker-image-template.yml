name: Reusable Docker build and image push template

on:
  workflow_call:
    inputs:
      project-path:
        required: true
        type: string
      dockerfile-path:
        required: false
        type: string
        default: ''
      # image-name:
      #   required: false
      #   type: string
      #   default: ''
      aws-region:
        required: false
        type: string
        default: 'us-east-2'
      # ecr-repo:
      #   required: false
      #   type: string
      #   default: ''
      environment:
        description: "Deployment environment (dev, qa, prod)"
        required: true
        type: string
        default: 'dev'

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    env:
      AWS_ROLE_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNTID }}:role/GitHubActionsECRPushRole
      # AWS_ECR_REPO: ${{ vars.AWS_ECR_REPO }}

    permissions:
      id-token: write
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    # - name: Check Variable
    #   run: |
    #     echo "AWS account number - ${{ inputs.aws-accountid }} "
    #     echo "Env AWS Number ${{ vars.AWS_ACCOUNTID }}"
    #     echo "AWS_ROLE_ARN=$AWS_ROLE_ARN"

    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v3
    #   with:
    #     dotnet-version: '8.0.x'

    # - name: Restore dependencies
    #   run: dotnet restore ${{ inputs.project-path }}

    # - name: Build
    #   run: dotnet build ${{ inputs.project-path }} -c Release --no-restore

    # - name: Test (auto-discover *Tests.csproj)
    #   run: |
    #     set -euo pipefail
    #     if git ls-files '*Tests.csproj' >/dev/null 2>&1; then
    #       while IFS= read -r t; do
    #           echo "Running tests: $t"
    #           dotnet test "$t" -c Release --no-build --logger trx
    #       done < <(git ls-files '*Tests.csproj')
    #     else
    #       echo "No test projects found; skipping."
    #     fi
    
    # ✅ Download build artifacts
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dotnet-build
        path: ./output

    # ✅ Configure AWS credentials using OIDC
    - name: Configure AWS Credentials
      if: ${{ inputs.dockerfile-path != ''  && vars.AWS_ECR_REPO != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ inputs.aws-region }}

    # ✅ Login to Amazon ECR
    - name: Login to Amazon ECR
      if: ${{ inputs.dockerfile-path != ''  && vars.AWS_ECR_REPO != '' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # ✅ Build, Tag, and Push to ECR
    - name: Build and Push Docker image to ECR
      if: ${{ inputs.dockerfile-path != ''  && vars.AWS_ECR_REPO != '' }}
      run: |
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        ECR_REPO=${{ inputs.ecr-repo }}
        IMAGE_TAG=latest
        COMMIT_TAG=${{ github.sha }}

        echo "Building image with tags: $IMAGE_TAG, $COMMIT_TAG..."
        docker build \
          --build-arg APP_PATH=./output \
          -t $ECR_REGISTRY/$ECR_REPO:${IMAGE_TAG} \
          -t $ECR_REGISTRY/$ECR_REPO:${COMMIT_TAG} \
          -f ${{ inputs.dockerfile-path }} .

        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPO:${IMAGE_TAG}
        docker push $ECR_REGISTRY/$ECR_REPO:${COMMIT_TAG}
