name: Reusable ECS Service Deployment

on:
  workflow_call:
    inputs:
      cluster-name:
        description: "ECS Cluster Name"
        required: true
        type: string
      service-name:
        description: "ECS Service Name"
        required: true
        type: string
      task-family:
        description: "Task Definition Family"
        required: true
        type: string
      subnets:
        description: "Comma-separated list of Subnet IDs"
        required: true
        type: string
      security-groups:
        description: "Comma-separated list of Security Group IDs"
        required: true
        type: string
      desired-count:
        description: "Number of tasks"
        required: false
        type: string
        default: "1"
      aws-accountid:
        required: false
        type: string
        default: ''

jobs:
  deploy-service:
    runs-on: ubuntu-latest

    env:
      AWS_ROLE_ARN: arn:aws:iam::${{ inputs.aws-accountid }}:role/GitHubActionsECRPushRole

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: us-east-2

      - name: Create or Update ECS Service
        run: |
          CLUSTER_NAME=${{ inputs.cluster-name }}
          SERVICE_NAME=${{ inputs.service-name }}
          TASK_FAMILY=${{ inputs.task-family }}

          echo "Checking if service $SERVICE_NAME exists in cluster $CLUSTER_NAME..."

          if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text | grep -q "ACTIVE"; then
            echo "Updating existing ECS service..."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $TASK_FAMILY
          else
            echo "Creating new ECS service..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_FAMILY \
              --desired-count ${{ inputs.desired-count }} \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ inputs.subnets }}],securityGroups=[${{ inputs.security-groups }}],assignPublicIp=ENABLED}"
          fi
