name: Manual Promotion (Blue/Green)

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (e.g., dev, stage, prod)"
        required: true
        type: string
      main-listener-arn:
        description: "Primary ALB listener ARN"
        required: true
        type: string
      blue-target-group:
        description: "Blue Target Group ARN"
        required: true
        type: string
      green-target-group:
        description: "Green Target Group ARN"
        required: true
        type: string
      temp-listener-arn:
        description: "Temporary listener ARN (if created during deployment)"
        required: false
        type: string
      is-first-deploy:
        description: "Flag to indicate first deployment"
        required: true
        type: boolean
      idle-service:
        required: true
        description: "This is for new version deployment"
        type: string
      idle-tg:
        required: true
        description: "The idle target group ARN"
        type: string

jobs:
  promote:
    name: Promote Idle Deployment to Live
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ inputs.environment }}.yourapp.company.com

    steps:
        
      # 1️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNTID }}:role/GitHubActionsECSDeployRole
          aws-region: us-east-2
          audience: sts.amazonaws.com

      - name: Get idle color from previous Job
        run: |
          # echo "ACTIVE_COLOR=${{ inputs.active-service }}"
          echo "IDLE_COLOR=${{ inputs.idle-tg }}"
          echo "IDLE_COLOR=${{ inputs.idle-service }}"
          echo "IDLE_TG=${{ inputs.idle-tg}}"
          echo "FirstTimneDeployment=${{ inputs.is-first-deploy}}"

      # 2️⃣ Flip Traffic to New Version
      - name: Flip Traffic to New Version
        if: ${{ inputs.is-first-deploy == 'false' }}  # Skip first deployment
        run: |
          echo "Flipping traffic to idle service: ${{ inputs.idle-service }}..."
          aws elbv2 modify-listener \
            --listener-arn "${{ inputs.main-listener-arn }}" \
            --default-actions '[{"Type":"forward","TargetGroupArn":"'"${{ inputs.idle-tg }}"'"}]'
          echo "✅ Traffic successfully flipped to ${{ inputs.idle-service }}"

      # 3️⃣ Remove temporary listener if exists
      - name: Remove Temporary Listener
        if: ${{ inputs.temp-listener-arn }}
        run: |
          echo "Removing temporary listener: ${{ inputs.temp-listener-arn }}"
          aws elbv2 delete-listener --listener-arn "${{ inputs.temp-listener-arn }}"
          echo "✅ Temporary listener removed"

      # 4️⃣ Scale down old ECS service
      - name: Scale Down Old Active Service
        if: ${{ inputs.is-first-deploy == 'false' }}  # Skip first deployment
        run: |
          set -e
          CLUSTER_NAME="${{ vars.AWS_CLUSTER_NAME }}"
          ACTIVE_SERVICE="${{ inputs.active-service }}"

          echo "Scaling down old active service: $ACTIVE_SERVICE"
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$ACTIVE_SERVICE" \
            --desired-count 0

          echo "✅ $ACTIVE_SERVICE scaled down successfully."
