name: Manual Promotion (Blue/Green)

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (e.g., dev, stage, prod)"
        required: true
        type: string
      main-listener-arn:
        description: "Primary ALB listener ARN"
        required: true
        type: string
      blue-target-group:
        description: "Blue Target Group ARN"
        required: true
        type: string
      green-target-group:
        description: "Green Target Group ARN"
        required: true
        type: string
      temp-listener-arn:
        description: "Temporary listener ARN (if created during deployment)"
        required: false
        type: string
      # active-service:
      #   required: true
      #   description: "This is an live deployment"
      #   type: string
      idle-service:
        required: true
        description: "This is for new version deployment"
        type: string
      idle-tg:
        required: true
        description: "The idle target group ARN"
        type: string

jobs:
  promote:
    name: Promote Idle Deployment to Live
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ inputs.environment }}.yourapp.company.com

    steps:
        
      # 1Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNTID }}:role/GitHubActionsECSDeployRole
          aws-region: us-east-2
          audience: sts.amazonaws.com

      - name: Get idle color from previous Job
        run: |
          # echo "ACTIVE_COLOR=${{ inputs.active-service }}"
          echo "IDLE_COLOR=${{ inputs.idle-tg }}"
          echo "IDLE_COLOR=${{ inputs.idle-service }}"
          echo "IDLE_TG=${{ inputs.idle-tg}}"

      # 2Ô∏è‚É£ Flip Traffic to New Version
      - name: Flip Traffic to New Version (Skip if First Deployment)
        id: flip
        if: ${{ inputs.idle-tg != '' }}  # Skip first deployment
        run: |
          IDLE_TG=${{ inputs.idle-tg}}
          IDLE_COLOR=${{ inputs.idle-service }}
          echo "Flipping traffic to $IDLE_COLOR..."
          COUNT=$(aws elbv2 describe-target-health --target-group-arn "$IDLE_TG" \
            --query 'TargetHealthDescriptions | length(@)' --output text)
          
          echo "Idle TG registered targets count: $COUNT"
          if [ "$COUNT" -eq 0 ]; then
            aws elbv2 modify-listener \
              --listener-arn "${{ inputs.main-listener-arn }}" \
              --default-actions '[{"Type":"forward","TargetGroupArn":"'"$IDLE_TG"'"}]'
            echo "‚úÖ Traffic successfully flipped to $IDLE_COLOR"
            echo "skip_flip=true" >> $GITHUB_OUTPUT
          else
            echo "This is first time ($IDLE_COLOR) deployment; no traffic flip needed."
            echo "skip_flip=false" >> $GITHUB_OUTPUT
          fi

      # 3Ô∏è‚É£ Remove temporary listener if exists
      - name: Remove Temporary Listener
        if: ${{ inputs.temp-listener-arn }}
        run: |
          echo "Removing temporary listener: ${{ inputs.temp-listener-arn }}"
          aws elbv2 delete-listener --listener-arn "${{ inputs.temp-listener-arn }}"
          echo "‚úÖ Temporary listener removed"

      # 4Ô∏è‚É£ Scale down old ECS service
      - name: Scale down old service
        if: ${{ steps.flip.outputs.skip_flip == 'true' }}  # Only run if traffic was flipped
        run: |
          set -e  # Stop if any command fails

          CLUSTER_NAME="${{ vars.AWS_CLUSTER_NAME }}"
          BASE_SERVICE_NAME="${INPUT_SERVICE_NAME:-$(basename "$GITHUB_REPOSITORY")}"
          BLUE_SERVICE="${BASE_SERVICE_NAME}-blue"
          GREEN_SERVICE="${BASE_SERVICE_NAME}-green"

          ACTIVE_TG="${{ inputs.active-tg }}"
          BLUE_TG="${{ inputs.blue-tg-arn }}"
          GREEN_TG="${{ inputs.green-tg-arn }}"

          if [ "$ACTIVE_TG" = "$BLUE_TG" ]; then
            ACTIVE_SERVICE="$BLUE_SERVICE"
            IDLE_SERVICE="$GREEN_SERVICE"
            IDLE_TG="$GREEN_TG"
          else
            ACTIVE_SERVICE="$GREEN_SERVICE"
            IDLE_SERVICE="$BLUE_SERVICE"
            IDLE_TG="$BLUE_TG"
          fi

          echo "üîπ Active service: $ACTIVE_SERVICE"
          echo "üîπ Idle service: $IDLE_SERVICE"

          echo "Scaling down ECS service ($ACTIVE_SERVICE)..."

          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$ACTIVE_SERVICE" \
            --desired-count 0

          echo "‚úÖ $ACTIVE_SERVICE scaled down to 0 ‚Äî Blue/Green cleanup complete."
