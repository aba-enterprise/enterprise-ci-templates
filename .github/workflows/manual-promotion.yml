name: Manual Promotion (Blue/Green)

on:
  workflow_call:
    inputs:
      environment:
        description: "Target environment (e.g., dev, stage, prod)"
        required: true
        type: string
      main-listener-arn:
        description: "Primary ALB listener ARN"
        required: true
        type: string
      blue-tg-arn:
        description: "Blue Target Group ARN"
        required: true
        type: string
      green-tg-arn:
        description: "Green Target Group ARN"
        required: true
        type: string
      manual-flip:
        description: "Manually flip traffic to idle service (true/false)"
        required: false
        type: boolean
        default: false
      temp-listener-arn:
        description: "Temporary listener ARN (if created during deployment)"
        required: false
        type: string

jobs:
  promote:
    name: Promote Idle Deployment to Live
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ inputs.environment }}.yourapp.company.com

    steps:
      # 1️⃣ Determine idle color
      - name: Determine active and idle color
        id: set-colors
        run: |
         BASE_SERVICE_NAME="${INPUT_SERVICE_NAME:-$(basename $GITHUB_REPOSITORY)}"

            # Construct ECS service names dynamically
            BLUE_SERVICE="${BASE_SERVICE_NAME}-blue"
            GREEN_SERVICE="${BASE_SERVICE_NAME}-green"

            echo "Blue Service: $BLUE_SERVICE"
            echo "Green Service: $GREEN_SERVICE"
          
            ACTIVE_TG=$(aws elbv2 describe-listeners \
            --listener-arns "${{ inputs.main-listener-arn }}" \
            --query "Listeners[0].DefaultActions[0].TargetGroupArn" \
            --output text)

          if [ "$ACTIVE_TG" = "${{ inputs.blue-tg-arn }}" ]; then
              ACTIVE_COLOR="blue"
              IDLE_COLOR="green"
              IDLE_TG="${{ inputs.green-tg-arn }}"
              OLD_SERVICE="$BLUE_SERVICE"
          else
              ACTIVE_COLOR="green"
              IDLE_COLOR="blue"
              IDLE_TG="${{ inputs.blue-tg-arn }}"
              OLD_SERVICE="$GREEN_SERVICE"
          fi

          echo "ACTIVE_COLOR=$ACTIVE_COLOR" >> $GITHUB_ENV
          echo "IDLE_COLOR=$IDLE_COLOR" >> $GITHUB_ENV
          echo "IDLE_TG=$IDLE_TG" >> $GITHUB_ENV
          echo "OLD_SERVICE=$OLD_SERVICE" >> $GITHUB_ENV
          echo "Active color: $ACTIVE_COLOR, Idle color: $IDLE_COLOR"

      # 2️⃣ Manual flip traffic
      - name: Flip Traffic to Idle Color
        if: ${{ inputs.manual-flip }}
        run: |
          echo "Flipping traffic to $IDLE_COLOR..."
          aws elbv2 modify-listener \
            --listener-arn "${{ inputs.main-listener-arn }}" \
            --default-actions '[{"Type":"forward","TargetGroupArn":"'"$IDLE_TG"'"}]'

          echo "✅ Traffic successfully flipped to $IDLE_COLOR"

      # 3️⃣ Remove temporary listener if exists
      - name: Remove Temporary Listener
        if: ${{ inputs.temp-listener-arn }}
        run: |
          echo "Removing temporary listener: ${{ inputs.temp-listener-arn }}"
          aws elbv2 delete-listener --listener-arn "${{ inputs.temp-listener-arn }}"
          echo "✅ Temporary listener removed"

      # 4️⃣ Scale down old ECS service
      - name: Scale down old service
        run: |
          echo "Scaling down old ($ACTIVE_COLOR) ECS service: $OLD_SERVICE"
          CLUSTER_NAME=${{ vars.AWS_CLUSTER_NAME }}
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$OLD_SERVICE" \
            --desired-count 0
          echo "✅ Old service scaled down to 0. Blue/Green cleanup complete."
