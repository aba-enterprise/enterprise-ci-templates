name: Reusable Docker Build & Push

on:
  workflow_call:
    inputs:
      app-language:
        description: "Application app-language (csharp, java, node, python)"
        required: true
        type: string
      language-version:
        description: "Runtime version (e.g., .NET 8, Java 17, Node 20, Python 3.11)"
        required: true
        type: string
      project-path:
        description: "Project root path"
        required: false
        type: string
        default: "."
      dockerfile-path:
        description: "Dockerfile path"
        required: false
        type: string
        default: './Dockerfile'
      aws-region:
        description: "AWS region for ECR"
        required: false
        type: string
        default: 'us-east-2'
      environment:
        description: "Deployment environment (dev, qa, prod)"
        required: true
        type: string
        default: 'dev'
      image-tag:
        description: "Optional Docker image tag (default: github.sha)"
        required: false
        type: string

jobs:
  docker-build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    env:
      AWS_ROLE_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNTID }}:role/GitHubActionsECRPushRole

    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Setup app-language runtime (best practice)
      - name: Setup .NET SDK
        if: ${{ inputs.app-language == 'csharp' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.language-version }}

      - name: Setup Java
        if: ${{ inputs.app-language == 'java' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.language-version }}

      - name: Setup Node.js
        if: ${{ inputs.app-language == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.language-version }}

      - name: Setup Python
        if: ${{ inputs.app-language == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.language-version }}

      # 3️⃣ Build artifacts → standardized output folder
      - name: Build artifacts for ${{ inputs.app-language }} version ${{ inputs.language-version }}
        id: build-artifacts
        run: |
          PROJECT_PATH="${{ inputs.project-path }}"
          APP_LANGUAGE="${{ inputs.app-language }}"
          ARTIFACT_PATH="$PROJECT_PATH/output"

          # Ensure folder is clean
          rm -rf "$ARTIFACT_PATH"
          mkdir -p "$ARTIFACT_PATH"

          echo "Building artifacts for $APP_LANGUAGE from project path: $PROJECT_PATH into output folder: $ARTIFACT_PATH"
          ls -la
          pwd
          if [ "$APP_LANGUAGE" == "csharp" ]; then
              # Find the first .csproj file in the project path dynamically
              CSPROJ_FILE=$(find "$PROJECT_PATH" -maxdepth 1 -name "*.csproj" | head -n 1)
              if [ -z "$CSPROJ_FILE" ]; then
                  echo "❌ No .csproj file found in $PROJECT_PATH"
                  exit 1
              fi
              echo "✅ Found project file: $CSPROJ_FILE"
              # Restore and publish dynamically
              dotnet restore "$CSPROJ_FILE"
              dotnet publish "$CSPROJ_FILE" -c Release -o "$ARTIFACT_PATH"
              echo "Checking the publish files!!!"
              ls -la $ARTIFACT_PATH/

          elif [ "$APP_LANGUAGE" == "java" ]; then
            if [ -f "$PROJECT_PATH/mvnw" ]; then
              echo "Using Maven Wrapper..."
              "$PROJECT_PATH/mvnw" clean package -DskipTests -f "$PROJECT_PATH"
            else
              echo "Using system Maven..."
              mvn clean package -DskipTests
            fi
            cp target/*.jar "$ARTIFACT_PATH/"

          elif [ "$APP_LANGUAGE" == "node" ]; then
            cd "$PROJECT_PATH"
            npm install
            npm run build
            cp -r dist/* "$ARTIFACT_PATH/"

          elif [ "$APP_LANGUAGE" == "python" ]; then
            cp -r "$PROJECT_PATH"/* "$ARTIFACT_PATH/"

          else
            echo "⚠️ Unsupported app-language: $APP_LANGUAGE"
            exit 1
          fi

          # Output for later steps
          echo "artifact-path=output" >> $GITHUB_OUTPUT

      # 4️⃣ Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}

      # 5️⃣ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6️⃣ Build and push Docker image
      - name: Build and Push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPO=${{ vars.AWS_ECR_REPO }}
          IMAGE_TAG=${{ inputs.image-tag != '' && inputs.image-tag || github.sha }}
          PROJECT_PATH="${{ inputs.project-path }}"
          ARTIFACT_PATH="output"
          APP_LANGUAGE="${{ inputs.app-language }}"

          echo "Files inside context ($PROJECT_PATH):"
          ls -la "$PROJECT_PATH"
          ls -la "$PROJECT_PATH/output"

          # Service and branch info
          SERVICE_NAME=$(basename ${{ github.repository }})
          BRANCH_NAME=${GITHUB_REF##*/}
          IMAGE_TAG_SHORT=$(echo $GITHUB_SHA | cut -c1-7)
          ENVIRONMENT=${{ inputs.environment }}

          # Correct tag format
          IMAGE_TAG="${SERVICE_NAME}-${IMAGE_TAG_SHORT}"
          IMAGE_TAG_BRANCH="${SERVICE_NAME}-${BRANCH_NAME}"

          echo "Build context: $PROJECT_PATH"
          echo "Artifacts path inside context: $ARTIFACT_PATH"
          echo "Tags: $IMAGE_TAG, $IMAGE_TAG_BRANCH"

          docker build \
            --build-arg APP_LANGUAGE="$APP_LANGUAGE" \
            --build-arg LANGUAGE_VERSION=${{ inputs.language-version }} \
            --build-arg APP_PATH="$ARTIFACT_PATH" \
            --build-arg ENVIRONMENT="$ENVIRONMENT" \
            -f "${{ inputs.dockerfile-path }}" \
            -t "$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" \
            -t "$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG_BRANCH" \
            "$PROJECT_PATH"

          docker push "$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG_BRANCH"

