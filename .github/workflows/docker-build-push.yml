name: Reusable Docker Build & Push

on:
  workflow_call:
    inputs:
      language:
        description: "Application language (csharp, java, node, python)"
        required: true
        type: string
      language-version:
        description: "Version of the runtime (e.g., .NET 8.0, Java 21, Node 20, Python 3.11)"
        required: true
        type: string
      project-path:
        description: "Path to the project root"
        required: false
        type: string
        default: "."
      dockerfile-path:
        description: "Path to Dockerfile"
        required: false
        type: string
        default: './Dockerfile'
      aws-region:
        description: "AWS region for ECR"
        required: false
        type: string
        default: 'us-east-2'
      environment:
        description: "Deployment environment (dev, qa, prod)"
        required: true
        type: string
        default: 'dev'
      image-tag:
        description: "Docker image tag (optional, default: github.sha)"
        required: false
        type: string

jobs:
  docker-build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    env:
      AWS_ROLE_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNTID }}:role/GitHubActionsECRPushRole

    permissions:
      id-token: write
      contents: read
      packages: write
      security-events: write
      actions: read

    steps:
      
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup language runtime (for local build/test before Docker image)
      - name: Setup language runtime
        run: |
          if [ "${{ inputs.language }}" == "csharp" ]; then
            echo "‚û°Ô∏è Installing .NET SDK ${{ inputs.language-version }}"
            sudo apt-get update
            sudo apt-get install -y dotnet-sdk-${{ inputs.language-version }}

          elif [ "${{ inputs.language }}" == "java" ]; then
            echo "‚û°Ô∏è Installing Java ${{ inputs.language-version }}"
            sudo apt-get update
            sudo apt-get install -y openjdk-${{ inputs.language-version }}-jdk
            export JAVA_HOME=/usr/lib/jvm/java-${{ inputs.language-version }}-openjdk-amd64
            echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV

          elif [ "${{ inputs.language }}" == "node" ]; then
            echo "‚û°Ô∏è Installing Node.js ${{ inputs.language-version }}"
            curl -fsSL https://deb.nodesource.com/setup_${{ inputs.language-version }}.x | sudo -E bash -
            sudo apt-get install -y nodejs

          elif [ "${{ inputs.language }}" == "python" ]; then
            echo "‚û°Ô∏è Installing Python ${{ inputs.language-version }}"
            sudo apt-get update
            sudo apt-get install -y python${{ inputs.language-version }} python${{ inputs.language-version }}-venv

          else
            echo "‚ö†Ô∏è Unsupported language: ${{ inputs.language }}"
            exit 1
          fi

      # 3Ô∏è‚É£ Build or prepare artifacts
      - name: Build artifacts (if needed)
        id: build-artifacts
        run: |
          ARTIFACT_PATH=""
          PROJECT_PATH="${{ inputs.project-path }}"

          if [ "${{ inputs.language }}" == "csharp" ]; then
            dotnet restore $PROJECT_PATH
            dotnet publish $PROJECT_PATH -c Release -o publishoutput
            ARTIFACT_PATH="publishoutput"

          elif [ "${{ inputs.language }}" == "java" ]; then
            ./mvnw clean package -DskipTests -f $PROJECT_PATH
            ARTIFACT_PATH="$PROJECT_PATH/target"

          elif [ "${{ inputs.language }}" == "node" ]; then
            cd $PROJECT_PATH
            npm install
            npm run build
            ARTIFACT_PATH="$PROJECT_PATH/dist"

          elif [ "${{ inputs.language }}" == "python" ]; then
            ARTIFACT_PATH="$PROJECT_PATH"

          fi

          echo "artifact-path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          echo "artifact-path=$ARTIFACT_PATH"

      # 4Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}

      # 5Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6Ô∏è‚É£ Build and push Docker image
      - name: Build and Push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPO=${{ vars.AWS_ECR_REPO }}
          IMAGE_TAG=${{ inputs.image-tag || github.sha }}
          APP_PATH=${{ steps.build-artifacts.outputs.artifact-path }}

          echo "üì¶ Building Docker image for ${{ inputs.language }}:${{ inputs.language-version }}..."
          docker build \
            --build-arg APP_PATH=$APP_PATH \
            --build-arg LANGUAGE_VERSION=${{ inputs.language-version }} \
            -t $ECR_REGISTRY/$ECR_REPO:latest \
            -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG \
            -f ${{ inputs.dockerfile-path }} .

          echo "üöÄ Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPO:latest
          docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG