name: Reusable Docker Build & Push

on:
  workflow_call:
    inputs:
      language:
        description: "Application language (csharp, java, node, python)"
        required: true
        type: string
      language-version:
        description: "Runtime version (e.g., .NET 8, Java 17, Node 20, Python 3.11)"
        required: true
        type: string
      project-path:
        description: "Project root path"
        required: false
        type: string
        default: "."
      dockerfile-path:
        description: "Dockerfile path"
        required: false
        type: string
        default: './Dockerfile'
      aws-region:
        description: "AWS region for ECR"
        required: false
        type: string
        default: 'us-east-2'
      environment:
        description: "Deployment environment (dev, qa, prod)"
        required: true
        type: string
        default: 'dev'
      image-tag:
        description: "Optional Docker image tag (default: github.sha)"
        required: false
        type: string

jobs:
  docker-build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    env:
      AWS_ROLE_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNTID }}:role/GitHubActionsECRPushRole

    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup language runtime (best practice)
      - name: Setup .NET SDK
        if: ${{ inputs.language == 'csharp' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.language-version }}

      - name: Setup Java
        if: ${{ inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ inputs.language-version }}

      - name: Setup Node.js
        if: ${{ inputs.language == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.language-version }}

      - name: Setup Python
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.language-version }}

      # 3Ô∏è‚É£ Build artifacts ‚Üí standardized output folder
      - name: Build artifacts
        id: build-artifacts
        run: |
          ARTIFACT_PATH="output"
          PROJECT_PATH="${{ inputs.project-path }}"
          mkdir -p $ARTIFACT_PATH

          if [ "${{ inputs.language }}" == "csharp" ]; then
            dotnet restore $PROJECT_PATH
            dotnet publish $PROJECT_PATH -c Release -o $ARTIFACT_PATH

          elif [ "${{ inputs.language }}" == "java" ]; then
            ./mvnw clean package -DskipTests -f $PROJECT_PATH
            cp $PROJECT_PATH/target/*.jar $ARTIFACT_PATH/

          elif [ "${{ inputs.language }}" == "node" ]; then
            cd $PROJECT_PATH
            npm install
            npm run build
            cp -r dist/* $ARTIFACT_PATH/

          elif [ "${{ inputs.language }}" == "python" ]; then
            cp -r $PROJECT_PATH/* $ARTIFACT_PATH/

          else
            echo "‚ö†Ô∏è Unsupported language: ${{ inputs.language }}"
            exit 1
          fi

          echo "artifact-path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          echo "artifact-path is = $ARTIFACT_PATH"

      # 4Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}

      # 5Ô∏è‚É£ Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6Ô∏è‚É£ Build and push Docker image
      - name: Build and Push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPO=${{ vars.AWS_ECR_REPO }}
          IMAGE_TAG=${{ inputs.image-tag != '' && inputs.image-tag || github.sha }}
          PROJECT_PATH="${{ inputs.project-path }}"
          ARTIFACT_PATH="${{ steps.build-artifacts.outputs.artifact-path }}"

          ls -R
          pwd

          ARTIFACT_PATH="${{ inputs.project-path }}/output"
          mkdir -p "$ARTIFACT_PATH"
          ls -la

          echo "üì¶ Building Docker image for ${{ inputs.language }}..."

          # Use project folder as build context and Dockerfile path if customized
          DOCKERFILE=${{ inputs.dockerfile-path }}

          # Docker build
          docker build \
            --build-arg LANGUAGE=${{ inputs.language }} \
            --build-arg LANGUAGE_VERSION=${{ inputs.language-version }} \
            --build-arg APP_PATH=./output \
            -f "$DOCKERFILE" \
            -t "$ECR_REGISTRY/$ECR_REPO:latest" \
            -t "$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" \
            "$PROJECT_PATH"

          echo "üöÄ Pushing Docker image to ECR..."
          docker push "$ECR_REGISTRY/$ECR_REPO:latest"
          docker push "$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG"