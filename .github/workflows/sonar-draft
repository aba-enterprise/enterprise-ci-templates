name: SonarQube Analysis (.NET Core)

on:
  workflow_call:
    inputs:
      projectKey:
        required: true
        type: string
      projectName:
        required: true
        type: string
      projectPath:
        required: true
        type: string
      testProjectPath:
        required: true
        type: string
      organizationKey:
        required: true
        type: string
      run-sonarqube-gate-check:
        description: "Run Veracode alert check? (yes/no)"
        type: string
        required: false
        default: "yes"
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
    
jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
            name: dotnet-source
            path: ./source

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarQube Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"${{ inputs.projectKey }}" \
            /n:"${{ inputs.projectName }}" \
            /o:"${{ inputs.organizationKey }}" \
            /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="coverage/OpenCover.xml"

      - name: Build Solution for SonarQube Analysis
        run: |
          SLN_FILE=$(find ./source -name "*.sln" | head -n 1)
          if [ -f "$SLN_FILE" ]; then
            echo "Building solution: $SLN_FILE"
            dotnet build "$SLN_FILE"
          else
            echo "No solution file found. Skipping build."
          fi

      - name: Run Tests with Coverage
        continue-on-error: true
        run: |
          dotnet test ./source/ \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura \
          --results-directory ./TestResults

      # # OpenCover output format is only available for sponsors. Get your license here: https://reportgenerator.io/pro
      # - name: Convert Coverage to OpenCover
      #   run: |
      #     dotnet tool install -g dotnet-reportgenerator-globaltool

      #     echo "🔍 Searching for coverage.cobertura.xml file..."
      #     COVERAGE_FILE=$(find ./source -type f -path "*/TestResults/*/coverage.cobertura.xml" | head -n 1)

      #     if [ -f "$COVERAGE_FILE" ]; then
      #       echo "✅ Coverage file found: $COVERAGE_FILE"
      #       reportgenerator \
      #         -reports:"$COVERAGE_FILE" \
      #         -targetdir:"coverage" \
      #         -reporttypes:OpenCover
      #     else
      #       echo "❌ Coverage file not found. Skipping report generation."
      #       # exit 1  # Optional: fail the pipeline if coverage is expected
      #     fi

      # - name: Run Tests with Coverlet
      #   run: |
      #     echo "Start the Test.. $pwd"
      #     pwd
      #     dotnet test ./source/dotnet-ecs-sample.Tests \
      #       /p:CollectCoverage=true \
      #       /p:CoverletOutputFormat=opencover \
      #       /p:CoverletOutput=./source/dotnet-ecs-sample.Tests/TestResults/coverage.opencover.xml
          
      #     echo "End the Test"
      #     pwd
      #     ls -la
      #     ls -R ./source/

      - name: End SonarQube Analysis
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Setup ReportGenerator
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Extract Coverage Summary
        run: |
          COVERAGE_FILE=$(find ./source -type f -path "*/TestResults/*/coverage.cobertura.xml" | head -n 1)
          echo "Coverage file found: $COVERAGE_FILE"
          if [ -f "$COVERAGE_FILE" ]; then
            reportgenerator \
              -reports:$COVERAGE_FILE \
              -targetdir:coverage \
              -reporttypes:TextSummary
            echo "🔎 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
            cat coverage/Summary.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "🔎 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "No coverage report found." >> $GITHUB_STEP_SUMMARY
          fi
      
      # - name: Generate Coverage Summary
      #   run: |
      #     COVERAGE_FILE=$(find ./source -type f -name "coverage.opencover.xml" | head -n 1)
      #     echo "Coverage file found: $COVERAGE_FILE"
      #     if [ -f "$COVERAGE_FILE" ]; then
      #       reportgenerator \
      #         -reports:"$COVERAGE_FILE" \
      #         -targetdir:"coverage" \
      #         -reporttypes:TextSummary
      #       echo "🔎 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
      #       cat coverage/Summary.txt >> $GITHUB_STEP_SUMMARY
      #     else
      #       echo "🔎 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
      #       echo "No coverage report found." >> $GITHUB_STEP_SUMMARY
      #     fi

      - name: Check SonarQube Quality Gate
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ inputs.projectKey }}" \
            | jq -r '.projectStatus.status')

          echo "Quality Gate status: $STATUS"
          INPUT_RUN_ALERT_CHECK=${{ inputs.run-sonarqube-gate-check }}
          if [[ "$INPUT_RUN_ALERT_CHECK" == "yes" ]]; then
              if [ "$STATUS" = "OK" ]; then
                echo "✅ Quality Gate passed: $STATUS" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ Quality Gate failed: $STATUS" >> $GITHUB_STEP_SUMMARY
                # exit 1  # Uncomment to fail the pipeline on gate failure
              fi
          else
            echo "⚠️ Gate check bypassed as per configuration (run-sonarqube-gate-check=no)." >> $GITHUB_STEP_SUMMARY
          fi
